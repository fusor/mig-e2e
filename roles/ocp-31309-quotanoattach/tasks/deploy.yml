- name: Check namespace
  k8s_facts:
    kind: Namespace
    name: "{{ namespace }}"
  register: ns

- name: Create namespace
  shell: "{{ oc_binary }} new-project {{ namespace }} --skip-config-write=true"
  when: ns.resources | length == 0


- name: Get LimitRange
  k8s_info:
    kind: LimitRange
    namespace: "{{ namespace }}"
  register: limitrange
  until: limitrange.resources | length > 0
  ignore_errors: true

- name: Remove LimitRanges so that default limit ranges dont interfere with the test
  k8s:
    kind: LimitRange
    state : absent
    namespace: "{{ namespace }}"
    name: "{{ item.metadata.name }}"
  loop: "{{ limitrange.resources | default([]) }}"

- name: Create resource quota
  k8s:
    state : present
    definition: "{{ lookup('template', 'resourcequota.yml.j2' )}}"

- name: Create persistent volume claim
  k8s:
    state : present
    definition: "{{ lookup('template', 'persistent-volume-claim.yml.j2' )}}"

- name: Provision the volume
  k8s:
    state : present
    definition: "{{ lookup('template', 'provisioner-pod.yml.j2' )}}"


- name: Wait until provision is done
  k8s_facts:
    kind: Pod
    namespace: "{{ namespace }}"
    label_selectors: "app=provision"
    field_selectors: 
    - status.phase=Succeeded
  register: pod
  until: pod.resources | length > 0
  retries: 30

- name: Remove the provisioner pod
  k8s:
    state : absent
    definition: "{{ lookup('template', 'provisioner-pod.yml.j2' )}}"
